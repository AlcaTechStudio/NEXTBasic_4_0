'Generated by the GOLD Parser Builder

Option Explicit On
Option Strict Off

Imports System.IO
'Imports System.Windows.Forms


Module MyParser
    Public Parser As New GOLD.Parser

    Private Global_compiler_fail As Boolean

    Public Sub Setup()
        'This procedure can be called to load the parse tables. The class can
        'read tables using a BinaryReader.
        Parser.LoadTables(Path.Combine("..\..\..\..\NEXTBASIC_Grammar_4_0\NEXTBasic_Grammar_4_0.egt"))
    End Sub

    Public Function compile_to_three_code_address(ByRef Reader As Buffer_Entrada_codigo_fonte_S) As Boolean
        'This procedure starts the GOLD Parser Engine and handles each of the
        'messages it returns. Each time a reduction is made, you can create new
        'custom object and reassign the .CurrentReduction property. Otherwise, 
        'the system will use the Reduction object that was returned.
        '
        'The resulting tree will be a pure representation of the language 
        'and will be ready to implement.

        Dim Response As GOLD.ParseMessage
        Dim Done As Boolean                  'Controls when we leave the loop
        Dim Accepted As Boolean = False      'Was the parse successful?


        Parser.Open(Reader.codigo.ToString())
        Parser.TrimReductions = False  'Please read about this feature before enabling  

        Done = False
        Do Until Done
            Response = Parser.Parse()

            Select Case Response
                Case GOLD.ParseMessage.LexicalError
                    'Cannot recognize token
                    Done = True

                Case GOLD.ParseMessage.SyntaxError
                    'Expecting a different token
                    Done = True

                Case GOLD.ParseMessage.Reduction
                    'Create a customized object to store the reduction
                    Dim CurrentReduction As Object = CreateNewObject(Parser.CurrentReduction)
                    If Global_compiler_fail Then Exit Do
                Case GOLD.ParseMessage.Accept
                    'Accepted!
                    'Program = Parser.CurrentReduction  'The root node!                 
                    Done = True
                    Accepted = True

                Case GOLD.ParseMessage.TokenRead
                    'You don't have to do anything here.

                Case GOLD.ParseMessage.InternalError
                    'INTERNAL ERROR! Something is horribly wrong.
                    Done = True

                Case GOLD.ParseMessage.NotLoadedError
                    'This error occurs if the CGT was not loaded.                   
                    Done = True

                Case GOLD.ParseMessage.GroupError
                    'COMMENT ERROR! Unexpected end of file
                    Done = True
            End Select
        Loop

        Return Accepted
    End Function


    Public Identificadores_Construcao As New Identificadores_NextBasic


    Private Function CreateNewObject(Reduction as GOLD.Reduction) As Object
        Dim Result As Object = Nothing

        With Reduction
            Select Case .Parent.TableIndex
                Case ProductionIndex.Nl_Newline
                    ' <nl> ::= NewLine <nl> 

                Case ProductionIndex.Nl_Newline2
                    ' <nl> ::= NewLine 

                Case ProductionIndex.Nlopt_Newline
                    ' <nl Opt> ::= NewLine <nl Opt> 

                Case ProductionIndex.Nlopt
                    ' <nl Opt> ::=  

                Case ProductionIndex.Program
                    ' <Program> ::= <nl Opt> <Statements> 

                Case ProductionIndex.Statements
                    ' <Statements> ::= <Statement> <Statements> 

                Case ProductionIndex.Statements2
                    ' <Statements> ::=  

                Case ProductionIndex.Statement
                    ' <Statement> ::= <If Stm> 

                Case ProductionIndex.Statement2
                    ' <Statement> ::= <Select Stm> 

                Case ProductionIndex.Statement_Numconst_Id_Eq
                    ' <Statement> ::= '#const' ID '=' <Expression> <nl> 

                Case ProductionIndex.Statement_Numlog_Stringliteral
                    ' <Statement> ::= '#Log' StringLiteral <nl> 

                Case ProductionIndex.Statement_Numcompdir_Stringliteral
                    ' <Statement> ::= '#compdir' StringLiteral <nl> 

                Case ProductionIndex.Statement_Num_Numendif
                    ' <Statement> ::= '#' <cond_comp_beg> <Expression> <nl> <Statements> <cond_comp_block> '#endif' <nl> 

                Case ProductionIndex.Statement_For_Eq_To
                    ' <Statement> ::= For <Variable> '=' <Expression> To <Expression> <nl> <Statements> <next_fn> <nl> 

                Case ProductionIndex.Statement_For_Eq_To_Step
                    ' <Statement> ::= For <Variable> '=' <Expression> To <Expression> step <Expression> <nl> <Statements> <next_fn> <nl> 

                Case ProductionIndex.Statement_Do_Loop
                    ' <Statement> ::= Do <nl> <Statements> loop <nl> 

                Case ProductionIndex.Statement_While_Lparen_Rparen
                    ' <Statement> ::= While '(' <Expression> ')' <nl> <Statements> <while_end> <nl> 

                Case ProductionIndex.Statement_While_Lparen_Rparen2
                    ' <Statement> ::= While '(' <Expression> ')' <Non-Block Stm> <nl> 

                Case ProductionIndex.Statement_Sysreg_Id_As_At_Hexliteral
                    ' <Statement> ::= sysreg ID as <var_type> at hexLiteral <nl> 

                Case ProductionIndex.Statement_Id_As
                    ' <Statement> ::= <dim_g> ID <var_opt_param> as <var_type> <var_opt_assing> <nl> 

                Case ProductionIndex.Statement_Structure_Id_End_Structure
                    ' <Statement> ::= Structure ID <nl> <Enum List> End Structure <nl> 

                Case ProductionIndex.Statement3
                    ' <Statement> ::= <function_dec_s> <nl> 

                Case ProductionIndex.Statement4
                    ' <Statement> ::= <sub_dec_s> <nl> 

                Case ProductionIndex.Statement_Imports_Stringliteral
                    ' <Statement> ::= imports StringLiteral <nl> 

                Case ProductionIndex.Statement_Equal_Id_Stringliteral
                    ' <Statement> ::= Equal ID StringLiteral <nl> 

                Case ProductionIndex.Statement_Label
                    ' <Statement> ::= LABEL <nl> 

                Case ProductionIndex.Statement_Data
                    ' <Statement> ::= Data <data list> <nl> 

                Case ProductionIndex.Statement_Dataint
                    ' <Statement> ::= Dataint <data list> <nl> 

                Case ProductionIndex.Statement_Datalong
                    ' <Statement> ::= Datalong <data list> <nl> 

                Case ProductionIndex.Statement_Asmliteral
                    ' <Statement> ::= asmLiteral <nl> 

                Case ProductionIndex.Statement5
                    ' <Statement> ::= <Non-Block Stm> <nl> 

                Case ProductionIndex.Nonblockstm_Exit_Do
                    ' <Non-Block Stm> ::= Exit Do 

                Case ProductionIndex.Nonblockstm_Exit_For
                    ' <Non-Block Stm> ::= Exit For 

                Case ProductionIndex.Nonblockstm_Exit_While
                    ' <Non-Block Stm> ::= Exit While 

                Case ProductionIndex.Nonblockstm_Exit_Select
                    ' <Non-Block Stm> ::= Exit Select 

                Case ProductionIndex.Nonblockstm_Goto_Id
                    ' <Non-Block Stm> ::= GoTo ID 

                Case ProductionIndex.Nonblockstm__asm_Lparen_Stringliteral_Rparen
                    ' <Non-Block Stm> ::= '_asm' '(' StringLiteral ')' 

                Case ProductionIndex.Nonblockstm_Return
                    ' <Non-Block Stm> ::= Return 

                Case ProductionIndex.Nonblockstm_Return2
                    ' <Non-Block Stm> ::= Return <Expression> 

                Case ProductionIndex.Nonblockstm_Bit_set_Lparen_Comma_Rparen
                    ' <Non-Block Stm> ::= 'Bit_Set' '(' <Variable> ',' <Expression> ')' 

                Case ProductionIndex.Nonblockstm_Bit_clear_Lparen_Comma_Rparen
                    ' <Non-Block Stm> ::= 'Bit_Clear' '(' <Variable> ',' <Expression> ')' 

                Case ProductionIndex.Nonblockstm_Push_Lparen_As_Comma_Stringliteral_Rparen
                    ' <Non-Block Stm> ::= push '(' <Expression> as <reg_size> ',' StringLiteral ')' 

                Case ProductionIndex.Nonblockstm_Poke_Lparen_As_Comma_Rparen
                    ' <Non-Block Stm> ::= poke '(' <Expression> as <reg_size> ',' <Expression> ')' 

                Case ProductionIndex.Nonblockstm
                    ' <Non-Block Stm> ::= <Variable> <Assign Op> <Expression> 

                Case ProductionIndex.Nonblockstm2
                    ' <Non-Block Stm> ::= <sub_call> 

                Case ProductionIndex.Function_dec_s_Function_Id_As_End_Function
                    ' <function_dec_s> ::= <opt_inline> Function ID <Param List> as <var_type> <nl> <Statements> End Function 

                Case ProductionIndex.Sub_dec_s_Sub_Id_End_Sub
                    ' <sub_dec_s> ::= <opt_inline> Sub ID <Param List> <nl> <Statements> End Sub 

                Case ProductionIndex.Var_opt_param_Lbracket_Rbracket
                    ' <var_opt_param> ::= '[' <var_Argument_dec> ']' 

                Case ProductionIndex.Var_opt_param_Lbracket_Rbracket2
                    ' <var_opt_param> ::= '[' ']' 

                Case ProductionIndex.Var_opt_param
                    ' <var_opt_param> ::=  

                Case ProductionIndex.Var_opt_assing_Eq
                    ' <var_opt_assing> ::= '=' <Expression> 

                Case ProductionIndex.Var_opt_assing
                    ' <var_opt_assing> ::=  

                Case ProductionIndex.While_end_End_While
                    ' <while_end> ::= End While 

                Case ProductionIndex.While_end_Wend
                    ' <while_end> ::= wend 

                Case ProductionIndex.Assignop_Eq
                    ' <Assign Op> ::= '=' 

                Case ProductionIndex.Assignop_Timeseq
                    ' <Assign Op> ::= '*=' 

                Case ProductionIndex.Assignop_Diveq
                    ' <Assign Op> ::= '/=' 

                Case ProductionIndex.Assignop_Backslasheq
                    ' <Assign Op> ::= '\=' 

                Case ProductionIndex.Assignop_Pluseq
                    ' <Assign Op> ::= '+=' 

                Case ProductionIndex.Assignop_Minuseq
                    ' <Assign Op> ::= '-=' 

                Case ProductionIndex.Assignop_Ltlteq
                    ' <Assign Op> ::= '<<=' 

                Case ProductionIndex.Assignop_Gtgteq
                    ' <Assign Op> ::= '>>=' 

                Case ProductionIndex.Assignop_Ampeq
                    ' <Assign Op> ::= '&=' 

                Case ProductionIndex.Assignop_Pipeeq
                    ' <Assign Op> ::= '|=' 

                Case ProductionIndex.Assignop_Careteq
                    ' <Assign Op> ::= '^=' 

                Case ProductionIndex.Assignop_Tildeeq
                    ' <Assign Op> ::= '~=' 

                Case ProductionIndex.Next_fn_Next
                    ' <next_fn> ::= next 

                Case ProductionIndex.Next_fn_Next_Id
                    ' <next_fn> ::= next ID 

                Case ProductionIndex.Dim_g_Dim
                    ' <dim_g> ::= dim 

                Case ProductionIndex.Dim_g_Global
                    ' <dim_g> ::= global 

                Case ProductionIndex.Opt_inline_Inline
                    ' <opt_inline> ::= inline 

                Case ProductionIndex.Opt_inline
                    ' <opt_inline> ::=  

                Case ProductionIndex.Cond_comp_beg_If
                    ' <cond_comp_beg> ::= if 

                Case ProductionIndex.Cond_comp_beg_Ifdef
                    ' <cond_comp_beg> ::= ifdef 

                Case ProductionIndex.Cond_comp_beg_Ifndef
                    ' <cond_comp_beg> ::= ifndef 

                Case ProductionIndex.Cond_comp_block_Numelse
                    ' <cond_comp_block> ::= '#Else' <cond_comp_beg> <Expression> <nl> <Statements> <cond_comp_block> 

                Case ProductionIndex.Cond_comp_block_Numelse2
                    ' <cond_comp_block> ::= '#Else' <nl> <Statements> 

                Case ProductionIndex.Cond_comp_block
                    ' <cond_comp_block> ::=  

                Case ProductionIndex.Ifstm_If_Then
                    ' <If Stm> ::= if <Expression> Then <nl> <Statements> <If Blocks> <if_e> <nl> 

                Case ProductionIndex.Ifstm_If_Then2
                    ' <If Stm> ::= if <Expression> Then <Non-Block Stm> <nl> 

                Case ProductionIndex.Ifstm_If_Then_Else
                    ' <If Stm> ::= if <Expression> Then <Non-Block Stm> Else <Non-Block Stm> <nl> 

                Case ProductionIndex.Ifblocks_Then
                    ' <If Blocks> ::= <else_if> <Expression> Then <nl> <Statements> <If Blocks> 

                Case ProductionIndex.Ifblocks_Else
                    ' <If Blocks> ::= Else <nl> <Statements> 

                Case ProductionIndex.Ifblocks
                    ' <If Blocks> ::=  

                Case ProductionIndex.If_e_End_If
                    ' <if_e> ::= End if 

                Case ProductionIndex.If_e_Endif
                    ' <if_e> ::= endif 

                Case ProductionIndex.Else_if_Elseif
                    ' <else_if> ::= Elseif 

                Case ProductionIndex.Else_if_Else_If
                    ' <else_if> ::= Else if 

                Case ProductionIndex.Var_type_Byte
                    ' <var_type> ::= <opt_var_attb> Byte 

                Case ProductionIndex.Var_type_Word
                    ' <var_type> ::= <opt_var_attb> word 

                Case ProductionIndex.Var_type_Long
                    ' <var_type> ::= <opt_var_attb> long 

                Case ProductionIndex.Var_type_Integer
                    ' <var_type> ::= <opt_var_attb> integer 

                Case ProductionIndex.Var_type_String
                    ' <var_type> ::= string 

                Case ProductionIndex.Var_type_Fixed
                    ' <var_type> ::= <opt_var_attb> fixed 

                Case ProductionIndex.Var_type_Single
                    ' <var_type> ::= <opt_var_attb> single 

                Case ProductionIndex.Var_type_New_Id
                    ' <var_type> ::= new ID 

                Case ProductionIndex.Var_type_Id
                    ' <var_type> ::= ID 

                Case ProductionIndex.Opt_var_attb_Signed
                    ' <opt_var_attb> ::= signed 

                Case ProductionIndex.Opt_var_attb_Unsigned
                    ' <opt_var_attb> ::= unsigned 

                Case ProductionIndex.Opt_var_attb
                    ' <opt_var_attb> ::=  

                Case ProductionIndex.Enumlist
                    ' <Enum List> ::= <Enum Item> <Enum List> 

                Case ProductionIndex.Enumlist2
                    ' <Enum List> ::=  

                Case ProductionIndex.Enumitem_Dim_Id_As
                    ' <Enum Item> ::= dim ID as <var_type> <nl> 

                Case ProductionIndex.Enumitem
                    ' <Enum Item> ::= <sub_dec_s> <nl> 

                Case ProductionIndex.Enumitem2
                    ' <Enum Item> ::= <function_dec_s> <nl> 

                Case ProductionIndex.Selectstm_Select_End_Select
                    ' <Select Stm> ::= Select <Expression> <nl> <Select Blocks> End Select <nl> 

                Case ProductionIndex.Selectblocks_Case
                    ' <Select Blocks> ::= Case <Expression> <nl> <Statements> <Select Blocks> 

                Case ProductionIndex.Selectblocks_Case_Else
                    ' <Select Blocks> ::= Case Else <nl> <Statements> 

                Case ProductionIndex.Selectblocks
                    ' <Select Blocks> ::=  

                Case ProductionIndex.Expression_Or
                    ' <Expression> ::= <And Exp> Or <Expression> 

                Case ProductionIndex.Expression_Xor
                    ' <Expression> ::= <And Exp> XOr <Expression> 

                Case ProductionIndex.Expression
                    ' <Expression> ::= <And Exp> 

                Case ProductionIndex.Andexp_And
                    ' <And Exp> ::= <Not Exp> And <And Exp> 

                Case ProductionIndex.Andexp
                    ' <And Exp> ::= <Not Exp> 

                Case ProductionIndex.Notexp_Not
                    ' <Not Exp> ::= NOT <Compare Exp> 

                Case ProductionIndex.Notexp
                    ' <Not Exp> ::= <Compare Exp> 

                Case ProductionIndex.Compareexp
                    ' <Compare Exp> ::= <Shift Exp> <Compare Op> <Compare Exp> 

                Case ProductionIndex.Compareexp2
                    ' <Compare Exp> ::= <Shift Exp> 

                Case ProductionIndex.Shiftexp_Ltlt
                    ' <Shift Exp> ::= <Add Exp> '<<' <Shift Exp> 

                Case ProductionIndex.Shiftexp_Gtgt
                    ' <Shift Exp> ::= <Add Exp> '>>' <Shift Exp> 

                Case ProductionIndex.Shiftexp
                    ' <Shift Exp> ::= <Add Exp> 

                Case ProductionIndex.Addexp_Plus
                    ' <Add Exp> ::= <Modulus Exp> '+' <Add Exp> 

                Case ProductionIndex.Addexp_Minus
                    ' <Add Exp> ::= <Modulus Exp> '-' <Add Exp> 

                Case ProductionIndex.Addexp
                    ' <Add Exp> ::= <Modulus Exp> 

                Case ProductionIndex.Modulusexp_Mod
                    ' <Modulus Exp> ::= <Int Div Exp> Mod <Modulus Exp> 

                Case ProductionIndex.Modulusexp
                    ' <Modulus Exp> ::= <Int Div Exp> 

                Case ProductionIndex.Intdivexp_Backslash
                    ' <Int Div Exp> ::= <Mult Exp> '\' <Int Div Exp> 

                Case ProductionIndex.Intdivexp
                    ' <Int Div Exp> ::= <Mult Exp> 

                Case ProductionIndex.Multexp_Times
                    ' <Mult Exp> ::= <Negate Exp> '*' <Mult Exp> 

                Case ProductionIndex.Multexp_Div
                    ' <Mult Exp> ::= <Negate Exp> '/' <Mult Exp> 

                Case ProductionIndex.Multexp
                    ' <Mult Exp> ::= <Negate Exp> 

                Case ProductionIndex.Negateexp_Minus
                    ' <Negate Exp> ::= '-' <Value> 

                Case ProductionIndex.Negateexp_Tilde
                    ' <Negate Exp> ::= '~' <Value> 

                Case ProductionIndex.Negateexp
                    ' <Negate Exp> ::= <Value> 

                Case ProductionIndex.Value_Lparen_Rparen
                    ' <Value> ::= '(' <Expression> ')' 

                Case ProductionIndex.Value_Decliteral
                    ' <Value> ::= decLiteral 

                Case ProductionIndex.Value_Fixliteral
                    ' <Value> ::= fixliteral 

                Case ProductionIndex.Value_Hexliteral
                    ' <Value> ::= hexLiteral 

                Case ProductionIndex.Value_Binliteral
                    ' <Value> ::= binLiteral 

                Case ProductionIndex.Value_Chrliteral
                    ' <Value> ::= chrliteral 

                Case ProductionIndex.Value_Stringliteral
                    ' <Value> ::= StringLiteral 

                Case ProductionIndex.Value_True
                    ' <Value> ::= True 

                Case ProductionIndex.Value_False
                    ' <Value> ::= False 

                Case ProductionIndex.Value_Addressof_Lparen_Rparen
                    ' <Value> ::= AddressOf '(' <Variable> ')' 

                Case ProductionIndex.Value_Pop_Lparen_Stringliteral_As_Rparen
                    ' <Value> ::= pop '(' StringLiteral as <reg_size> ')' 

                Case ProductionIndex.Value_Peek_Lparen_As_Rparen
                    ' <Value> ::= peek '(' <Expression> as <reg_size> ')' 

                Case ProductionIndex.Value_Bit_test_Lparen_Comma_Rparen
                    ' <Value> ::= 'Bit_Test' '(' <Expression> ',' <Expression> ')' 

                Case ProductionIndex.Value_Id_Dot_Decliteral
                    ' <Value> ::= ID '.' decLiteral 

                Case ProductionIndex.Value
                    ' <Value> ::= <Variable> 

                Case ProductionIndex.Value2
                    ' <Value> ::= <func_call> 

                Case ProductionIndex.Value_Lbracket_Rbracket
                    ' <Value> ::= '[' <data list> ']' 

                Case ProductionIndex.Variable_Id_Lbracket_Rbracket
                    ' <Variable> ::= ID '[' <var_Argument> ']' 

                Case ProductionIndex.Variable_Id_Lbracket_Rbracket_Dot_Id
                    ' <Variable> ::= ID '[' <var_Argument> ']' '.' ID 

                Case ProductionIndex.Variable_Id_Dot_Id
                    ' <Variable> ::= ID '.' ID 

                Case ProductionIndex.Variable_Id
                    ' <Variable> ::= ID 

                Case ProductionIndex.Func_call
                    ' <func_call> ::= <Variable> <Argument List_F> 

                Case ProductionIndex.Sub_call
                    ' <sub_call> ::= <Variable> <Argument List_F> 

                Case ProductionIndex.Compareop_Eq
                    ' <Compare Op> ::= '=' 

                Case ProductionIndex.Compareop_Ltgt
                    ' <Compare Op> ::= '<>' 

                Case ProductionIndex.Compareop_Lt
                    ' <Compare Op> ::= '<' 

                Case ProductionIndex.Compareop_Gt
                    ' <Compare Op> ::= '>' 

                Case ProductionIndex.Compareop_Gteq
                    ' <Compare Op> ::= '>=' 

                Case ProductionIndex.Compareop_Lteq
                    ' <Compare Op> ::= '<=' 

                Case ProductionIndex.Datalist_Comma
                    ' <data list> ::= <data> ',' <data list> 

                Case ProductionIndex.Datalist
                    ' <data list> ::= <data> 

                Case ProductionIndex.Data_Decliteral
                    ' <data> ::= decLiteral 

                Case ProductionIndex.Data_Fixliteral
                    ' <data> ::= fixliteral 

                Case ProductionIndex.Data_Minus_Decliteral
                    ' <data> ::= '-' decLiteral 

                Case ProductionIndex.Data_Minus_Fixliteral
                    ' <data> ::= '-' fixliteral 

                Case ProductionIndex.Data_Hexliteral
                    ' <data> ::= hexLiteral 

                Case ProductionIndex.Data_Binliteral
                    ' <data> ::= binLiteral 

                Case ProductionIndex.Data_Stringliteral
                    ' <data> ::= StringLiteral 

                Case ProductionIndex.Data_Chrliteral
                    ' <data> ::= chrliteral 

                Case ProductionIndex.Data_Id
                    ' <data> ::= ID 

                Case ProductionIndex.Var_argument_dec_Comma
                    ' <var_Argument_dec> ::= <var_arg_dec> ',' <var_Argument_dec> 

                Case ProductionIndex.Var_argument_dec
                    ' <var_Argument_dec> ::= <var_arg_dec> 

                Case ProductionIndex.Var_arg_dec_Decliteral
                    ' <var_arg_dec> ::= decLiteral 

                Case ProductionIndex.Var_arg_dec_Hexliteral
                    ' <var_arg_dec> ::= hexLiteral 

                Case ProductionIndex.Var_arg_dec_Binliteral
                    ' <var_arg_dec> ::= binLiteral 

                Case ProductionIndex.Var_arg_dec_Chrliteral
                    ' <var_arg_dec> ::= chrliteral 

                Case ProductionIndex.Var_argument_Comma
                    ' <var_Argument> ::= <var_arg> ',' <var_Argument> 

                Case ProductionIndex.Var_argument
                    ' <var_Argument> ::= <var_arg> 

                Case ProductionIndex.Var_arg
                    ' <var_arg> ::= <Expression> 

                Case ProductionIndex.Argumentlist_f_Lparen_Rparen
                    ' <Argument List_F> ::= '(' <Argument Items_F> ')' 

                Case ProductionIndex.Argumentlist_f_Lparen_Rparen2
                    ' <Argument List_F> ::= '(' ')' 

                Case ProductionIndex.Argumentitems_f_Comma
                    ' <Argument Items_F> ::= <Expression> ',' <Argument Items_F> 

                Case ProductionIndex.Argumentitems_f
                    ' <Argument Items_F> ::= <Expression> 

                Case ProductionIndex.Paramlist_Lparen_Rparen
                    ' <Param List> ::= '(' <Param Items> ')' 

                Case ProductionIndex.Paramlist_Lparen_Rparen2
                    ' <Param List> ::= '(' ')' 

                Case ProductionIndex.Paramitems_Comma
                    ' <Param Items> ::= <Param Item> ',' <Param Items> 

                Case ProductionIndex.Paramitems
                    ' <Param Items> ::= <Param Item> 

                Case ProductionIndex.Paramitem_Byval_Id_As
                    ' <Param Item> ::= ByVal ID as <var_type> 

                Case ProductionIndex.Paramitem_Byref_Id_As
                    ' <Param Item> ::= ByRef ID as <var_type> 

                Case ProductionIndex.Reg_size_Byte
                    ' <reg_size> ::= Byte 

                Case ProductionIndex.Reg_size_Word
                    ' <reg_size> ::= word 

                Case ProductionIndex.Reg_size_Integer
                    ' <reg_size> ::= integer 

                Case ProductionIndex.Reg_size_Long
                    ' <reg_size> ::= long 

            End Select
        End With

        Return Result
    End Function
End Module
